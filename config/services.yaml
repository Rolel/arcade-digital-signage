# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    admin.screen:
        class: App\Admin\ScreenAdmin
        arguments: [~, App\Entity\Screen, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: signage, label: Screen }
        public: true

    admin.deck:
        class: App\Admin\DeckAdmin
        arguments: [~, App\Entity\Deck, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: signage, label: Deck }
        public: true

    admin.slide:
        class: App\Admin\SlideAdmin
        arguments: [~, App\Entity\Slide, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: signage, label: Slide }
        public: true

    admin.deck_has_slide:
        class: App\Admin\DeckHasSlideAdmin
        arguments: [~, App\Entity\DeckHasSlide, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: signage, label: DeckHasSlide, show_in_dashboard: false }
        public: true

    admin.screen_has_deck:
        class: App\Admin\ScreenHasDeckAdmin
        arguments: [~, App\Entity\ScreenHasDeck, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: signage, label: ScreenHasDeck, show_in_dashboard: false }
        public: true

    admin.game:
        class: App\Admin\GameAdmin
        arguments: [~, App\Entity\Game, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: gaming, label: Game }
        public: true

    admin.game_category:
        class: App\Admin\GameCategoryAdmin
        arguments: [~, App\Entity\GameCategory, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: gaming, label: GameCategory }
        public: true

    admin.brand:
        class: App\Admin\BrandAdmin
        arguments: [~, App\Entity\Brand, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: gaming, label: Brand }
        public: true

    admin.score:
        class: App\Admin\ScoreAdmin
        arguments: [~, App\Entity\Score, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: gaming, label: Score }
        public: true

    admin.scoreboard:
        class: App\Admin\ScoreboardAdmin
        arguments: [~, App\Entity\Scoreboard, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: gaming, label: Scoreboard }
        public: true
